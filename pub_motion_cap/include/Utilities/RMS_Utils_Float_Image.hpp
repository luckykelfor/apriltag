#ifndef _RMS_UTILS_FLOAT_IMAGE
#define _RMS_UTILS_FLOAT_IMAGE

/*
//====================================================================//
 
 ==========================
 Joseph DeGol
 UIUC Fall 2012
 ==========================
 Float_Image: Version 1.0
 ==========================
 
 ================================================================
 RMS_Utils_Float_Image.hpp
 This is a class for holding an image as a float array
 ================================================================
 
 List of Functions:
 
 ----- Constructors -----
			
 --- end Constructors ---
 
//====================================================================//
*/





//====================================================================//
//====================================================================//
//============================ Preamble ==============================//
//====================================================================//
//====================================================================//

//--------------------------------------------------------------------//
//---------------------------- Includes ------------------------------//
//--------------------------------------------------------------------//

//system
#include <iostream>

//---------------------------------------------------------------//
//----------------------- end Includes --------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//----------------------- Namespaces ----------------------------//
//---------------------------------------------------------------//

//namespaces
using namespace std;

//---------------------------------------------------------------//
//---------------------- end Namespaces -------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//------------------------- Globals -----------------------------//
//---------------------------------------------------------------//
//---------------------------------------------------------------//
//------------------------ end Globals --------------------------//
//---------------------------------------------------------------//


//---------------------------------------------------------------//
//------------------- Function Prototypes -----------------------//
//---------------------------------------------------------------//
//---------------------------------------------------------------//
//------------------ end Function Prototypes --------------------//
//---------------------------------------------------------------//

//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//





namespace Robots {
//====================================================================//
//====================================================================//
//=================== Float_Image Class Definition ===================//
//====================================================================//
//====================================================================//
class Float_Image
{
	
	//---------------------------------------------------------------//
	//------------------------- Private -----------------------------//
	//---------------------------------------------------------------//
	private:
		int myWidth, myHeight;
		float *myData;
	//---------------------------------------------------------------//
	//----------------------- end Private ---------------------------//
	//---------------------------------------------------------------//


	//---------------------------------------------------------------//
	//-------------------------- Public -----------------------------//
	//---------------------------------------------------------------//
	public:
	
		/*----- Constructors -----*/
		Float_Image(int width, int height);
		Float_Image(int width, int height, float *data);
		Float_Image(int width, int height, double data[]);
		Float_Image(int width, int height, unsigned char data[]);
		/*--- end Constructors ---*/
		
		/*----- Destructors -----*/
		~Float_Image();
		/*--- end Destructors ---*/
		
		/*----- Methods -----*/
		void Copy(int width, int height, float *src, float *dest);
		float* Copy(int width, int height, float *src);
		/*--- end Methods ---*/
		
		/*----- Operator Overloads -----*/
		friend ostream& operator<< (ostream& os, Float_Image &floatImage);
		/*--- end Operator Overloads ---*/
	
	//---------------------------------------------------------------//
	//------------------------ end Public ---------------------------//
	//---------------------------------------------------------------//
};

//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//





//====================================================================//
//====================================================================//
//================= Float_Image Class Implementation =================//
//====================================================================//
//====================================================================//


	//---------------------------------------------------------------//
	//-------------------------- Private ----------------------------//
	//---------------------------------------------------------------//

	//---------------------------------------------------------------//
	//------------------------ end Private --------------------------//
	//---------------------------------------------------------------//
	
	
	//---------------------------------------------------------------//
	//-------------------------- Public -----------------------------//
	//---------------------------------------------------------------//
	
	/*----- Constructors -----*/
	Float_Image::Float_Image(int width, int height)
	{
		myWidth = width;
		myHeight = height;
		myData = new float[width * height];
	}
	
	Float_Image::Float_Image(int width, int height, float *data)
	{
		myWidth = width;
		myHeight = height;
		myData = new float[width * height];
		for( int i=0; i < width*height; i++ ) { myData[i] = data[i]; }
	}

    Float_Image::Float_Image(int width, int height, double data[])
    {
        myWidth = width;
        myHeight = height;
        //myData = copy double to float data;
    }
    Float_Image::Float_Image(int width, int height, unsigned char data[])
    {
		myWidth = width;
		myHeight = height;
	}
	/*--- end Constructors ---*/
	
	
	/*----- Destructors -----*/
	Float_Image::~Float_Image()
	{
		//delete data array
		delete [] myData;
		myData = NULL;
	}
	/*--- end Destructors ---*/
	
	
	/*----- Methods -----*/
	void Copy(int width, int height, float *src, float *dest);
	{
		
	}
	Float_Image Copy(float *src);
	{
		
	}
	/*--- end Methods ---*/
	
	
	/*----- Operator Overloads -----*/
	ostream& operator << (ostream& out, Float_Image &floatImage)
	{
		//for each row
		for ( int i = 0; i < floatImage.myHeight; i++ )
		{
			//for each col, write to out
			for ( int j = 0; j < floatImage.myWidth; j++ ) { out << " " << floatImage.myData[i*floatImage.myHeight + j] << " ";	}
			out << endl;
		}
		out << endl;
		
		//return
		return out;
	}
	/*--- end Operator Overloads ---*/
			
	//---------------------------------------------------------------//
	//------------------------ end Public ---------------------------//
	//---------------------------------------------------------------//
	
	
//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//
//====================================================================//

}//end namespace Robots


#endif
